{"version":3,"sources":["utils/index.tsx","components/Menu/index.tsx","components/TopBar/Account/Account.tsx","actions/Users/interfaces.ts","api/index.ts","api/routes.ts","actions/Users/index.ts","actions/Websocket/interfaces.ts","components/TopBar/index.tsx","components/AuthenticateRoute/AuthenticateRoute.tsx","components/LoginForm/index.tsx","actions/Messages/interface.ts","actions/Messages/index.ts","actions/Websocket/index.ts","actions/Posts/interface.ts","components/Messages/index.tsx","actions/Posts/index.ts","shared/Card/index.tsx","components/Posts/index.tsx","components/UsersList/UserListView.tsx","components/UsersList/index.tsx","components/PostCreateForm/index.tsx","layouts/Home/index.tsx","App.tsx","serviceWorker.ts","reducers/index.ts","reducers/Messages/index.ts","reducers/Posts/index.ts","reducers/Users/index.ts","reducers/Websocket/index.ts","store/index.ts","index.tsx"],"names":["getAccessToken","localStorage","getItem","Menu","className","Account","user","useSelector","state","users","style","display","alignItems","width","height","borderRadius","src","process","REACT_APP_FILE_PATH","avatar_image","first_name","last_name","UserActionsTypes","agent","Axios","create","baseURL","token","defaults","headers","common","Authorization","WebSocketStates","logout","removeItem","type","LOG_OUT","payload","userToStore","USER_TO_STORAGE","TopBar","dispatch","useDispatch","useState","activeItem","handleItemClick","fluid","to","Item","name","active","onClick","position","AuthenticateRoute","path","component","exact","LoginForm","login","password","setstate","accessToken","setAccessToken","error","useEffect","decoded","jwt","handleChange","evt","currentTarget","value","prev","history","useHistory","id","placeholder","onChange","a","AUTHENTICATE_REQUEST","post","response","data","setItem","AUTHENTICATE_SUCCESS","status","push","AUTHENTICATE_FAILURE","authenticate","href","MessageActions","messageCreate","message","messageEdit","userAreDisconnected","JSON","parse","changeWSstatus","typing","whoTyping","PostsActions","MessagesView","wsRef","useRef","content","setState","messages","allMessages","activeUsers","websocketState","wsState","who_type","editing","setEditing","setUpWs","useCallback","ws","CONNECTING","onopen","CONNECTED","send","stringify","current","onmessage","console","log","parsed","Object","values","map","o","onclose","onerror","CONNECTION_ERROR","WebSocket","close","contentRef","focus","timeOut","setTimeout","clearTimeout","hendleRemove","handleSubmitEdit","text_content","handleEdit","owner_fullname","key","Math","random","marginLeft","ref","target","preventDefault","message_id","replied_to_text","replied_to_id","interceptors","request","use","accepted","rejrcted","Promise","reject","getAllPostsSuccess","posts","GET_ALL_POSTS_SUCCESS","getAllPostsFailure","GET_ALL_POSTS_FAILURE","checkUnauthorizedResponse","PostCard","postImage","postContent","postOwner","postCreatedAt","postLikes","onLike","postId","Card","centered","Header","Image","ui","Content","Meta","Description","extra","Icon","PostsList","length","GET_ALL_POSTS_REQUEST","get","handleLike","post_id","getState","POST_LIKE_REQUEST","user_id","POST_LIKE_SUCCESS","POST_LIKE_FAILURE","createdAt","media","owner_id","post_likes","UserListView","UserList","allUsers","GET_ALL_USERS_REQUEST","GET_ALL_USERS_SUCCESS","GET_ALL_USERS_FAILURE","PostCreateForm","file","fileRef","files","onSubmit","CREATE_POST_REQUEST","FormData","append","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","Home","App","Boolean","window","location","hostname","match","initialMessageState","edit_content","messagesReducer","action","filter","initialPostsState","postById","loading","postsReducer","GET_POST_BY_ID_REQUEST","GET_POST_BY_ID_SUCCESS","GET_POST_BY_ID_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","item","REMOVE_POST_FAILURE","initialState","userById","age","salary","usersReducer","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","CREATE_USER_REQUEST","CREATE_USER_SUCCESS","CREATE_USER_FAILURE","GET_USER_BY_ID_REQUEST","GET_USER_BY_ID_SUCCESS","GET_USER_BY_ID_FAILURE","initialWsState","wsReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHashHistory","store","createStore","combineReducers","router","connectRouter","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.66ab7340.chunk.js","sourcesContent":["import * as jwt from \"jsonwebtoken\";\r\nimport React from \"react\";\r\nimport {ITokenDecode} from \"../actions/Users\";\r\nimport {FileName} from \"../components/TopBar/Account/x\";\r\n\r\nexport const getAccessToken = () => {\r\n    const token = localStorage.getItem('token')\r\n    return token as string\r\n}\r\nexport const tokenToStorage = (token: string) => {\r\n    localStorage.setItem('token', token)\r\n    const decoded = jwt.decode(token)\r\n    return decoded as ITokenDecode\r\n}\r\nexport const setFocus = () => {\r\n\r\n}\r\n","import React from 'react';\r\n\r\nfunction Menu() {\r\n\t//use active in item for active\r\n\treturn (\r\n\t\t<div className=\"ui vertical pointing menu\">\r\n\t\t\t<a className=\"item\">Home</a>\r\n\t\t\t<a className=\"item\">Messages</a>\r\n\t\t\t<a className=\"item\">Friends</a>\r\n\t\t\t<a className=\"item\">Music</a>\r\n\t\t\t<a className=\"item\">Wall</a>\r\n\t\t\t<a className=\"item\">Settings</a>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport { Menu };\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {IRootState} from \"../../../reducers\";\r\nimport {IUsersInitialState} from \"../../../reducers/Users\";\r\nimport './Account.scss'\r\n\r\nexport default function Account() {\r\n    const {user} = useSelector<IRootState, IUsersInitialState>(state => state.users)\r\n\r\n    return <div className='account'>\r\n        <div style={{display:'flex',alignItems:'center'}}>\r\n            <img width={30} height={30} style={{borderRadius: '50%'}}\r\n                 src={`${process.env.REACT_APP_FILE_PATH}/${user?.avatar_image}`}/>\r\n            <span>{user?.first_name} - {user?.last_name}</span>\r\n        </div>\r\n    </div>\r\n}\r\n","export enum UserActionsTypes {\r\n    AUTHENTICATE_REQUEST = 'AUTHENTICATE_REQUEST',\r\n    AUTHENTICATE_SUCCESS = 'AUTHENTICATE_SUCCESS',\r\n    AUTHENTICATE_FAILURE = 'AUTHENTICATE_FAILURE',\r\n    GET_ALL_USERS_REQUEST = 'GET_ALL_USERS_REQUEST',\r\n    GET_ALL_USERS_SUCCESS = 'GET_ALL_USERS_SUCCESS',\r\n    GET_ALL_USERS_FAILURE = 'GET_ALL_USERS_FAILURE',\r\n    UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS',\r\n    UPDATE_USER_REQUEST = 'UPDATE_USER_REQUEST',\r\n    UPDATE_USER_FAILURE = 'UPDATE_USER_FAILURE',\r\n    GET_USER_BY_ID_REQUEST = 'GET_USER_BY_ID_REQUEST',\r\n    GET_USER_BY_ID_SUCCESS = 'GET_USER_BY_ID_SUCCESS',\r\n    GET_USER_BY_ID_FAILURE = 'GET_USER_BY_ID_FAILURE',\r\n    CREATE_USER_REQUEST = 'CREATE_USER_REQUEST',\r\n    CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS',\r\n    CREATE_USER_FAILURE = 'CREATE_USER_FAILURE',\r\n    USER_TO_STORAGE = 'USER_TO_STORAGE',\r\n    LOG_OUT = 'LOG_OUT'\r\n}\r\nexport interface IUser {\r\n    id: number\r\n    age: number\r\n    first_name: string\r\n    last_name: string\r\n    salary: number,\r\n    avatar_image: string\r\n}\r\nexport interface IAuthRequest {\r\n    type: UserActionsTypes.AUTHENTICATE_REQUEST, payload: null\r\n}\r\nexport interface IAuthSuccess {\r\n    type: UserActionsTypes.AUTHENTICATE_SUCCESS, payload: { user: IUser }\r\n}\r\nexport interface IAuthFailure {\r\n    type: UserActionsTypes.AUTHENTICATE_FAILURE, payload: { error: Error | string | null }\r\n}\r\nexport interface ICreateUserRequest {\r\n    type: UserActionsTypes.CREATE_USER_REQUEST, payload: null\r\n}\r\nexport interface ICreateUserSuccess {\r\n    type: UserActionsTypes.CREATE_USER_SUCCESS, payload: IUser\r\n}\r\nexport interface ICreateUserFailure {\r\n    type: UserActionsTypes.CREATE_USER_FAILURE, payload: { error: Error | string | null }\r\n}\r\nexport interface IUpdateUserRequest {\r\n    type: UserActionsTypes.UPDATE_USER_REQUEST, payload: null\r\n}\r\nexport interface IUpdateUserSuccess {\r\n    type: UserActionsTypes.UPDATE_USER_SUCCESS, payload: IUser\r\n}\r\nexport interface IUpdateUserFailure {\r\n    type: UserActionsTypes.UPDATE_USER_FAILURE, payload: { error: Error | string | null }\r\n}\r\nexport interface IGetUserByIdRequest {\r\n    type: UserActionsTypes.GET_USER_BY_ID_REQUEST, payload: null\r\n}\r\nexport interface IGetUserByIdSuccess {\r\n    type: UserActionsTypes.GET_USER_BY_ID_SUCCESS, payload: IUser\r\n}\r\nexport interface IGetUserByIdFailure {\r\n    type: UserActionsTypes.GET_USER_BY_ID_FAILURE, payload: { error: Error | null | string }\r\n}\r\nexport interface IGetAllUsersRequest {\r\n    type: UserActionsTypes.GET_ALL_USERS_REQUEST, payload: null\r\n}\r\nexport interface IGetAllUsersSuccess {\r\n    type: UserActionsTypes.GET_ALL_USERS_SUCCESS, payload: { users: Array<IUser> }\r\n}\r\nexport interface IGetAllUsersFailure {\r\n    type: UserActionsTypes.GET_ALL_USERS_FAILURE, payload: { error: Error | string | null }\r\n}\r\nexport interface IUserToStorage {\r\n    type: UserActionsTypes.USER_TO_STORAGE\r\n    payload: IUser\r\n}\r\nexport interface IUserLogOut {\r\n    type: UserActionsTypes.LOG_OUT\r\n    payload: null\r\n}\r\nexport type IUserActions =\r\n    IAuthFailure |\r\n    IAuthRequest |\r\n    IAuthSuccess |\r\n    ICreateUserRequest |\r\n    ICreateUserSuccess |\r\n    ICreateUserFailure |\r\n    IUpdateUserRequest |\r\n    IUpdateUserSuccess |\r\n    IUpdateUserFailure |\r\n    IGetAllUsersRequest |\r\n    IGetAllUsersSuccess |\r\n    IGetAllUsersFailure |\r\n    IGetUserByIdRequest |\r\n    IGetUserByIdSuccess |\r\n    IGetUserByIdFailure |\r\n    IUserToStorage |\r\n    IUserLogOut\r\n","import Axios from \"axios\"\r\nimport { apiRoutes } from \"./routes\"\r\n\r\nconst agent = Axios.create({\r\n    baseURL: apiRoutes,\r\n})\r\nexport default agent\r\n","export const filePath = process.env.REACT_APP_DEV_FILE_PATH;\r\nexport const websocketRoute = process.env.REACT_APP_DEV_WS_URL;\r\nexport const apiRoutes = process.env.REACT_APP_PROD_API\r\n\r\n\r\n// export  const apiRoutes = process.env.REACT_APP_DEV_API\r\n// export  const  websocketRoute = process.env.REACT_APP_PROD_WS_URL;\r\n// export const filePath = process.env.REACT_APP_PROD_FILE_PATH;\r\n\r\n","\r\nimport { AxiosResponse } from \"axios\"\r\nimport { Dispatch } from \"react\"\r\nimport agent from \"../../api\"\r\nimport { getAccessToken, tokenToStorage } from \"../../utils\"\r\nimport {\r\n    IAuthRequest,\r\n    UserActionsTypes,\r\n    IAuthSuccess,\r\n    IUser,\r\n    IAuthFailure,\r\n    IUserActions,\r\n    ICreateUserRequest,\r\n    ICreateUserSuccess,\r\n    ICreateUserFailure,\r\n    IUpdateUserFailure,\r\n    IUpdateUserRequest,\r\n    IUpdateUserSuccess,\r\n    IGetUserByIdRequest,\r\n    IGetUserByIdSuccess,\r\n    IGetUserByIdFailure,\r\n    IGetAllUsersRequest,\r\n    IGetAllUsersSuccess,\r\n    IGetAllUsersFailure,\r\n    IUserToStorage,\r\n    IUserLogOut\r\n} from \"./interfaces\"\r\n\r\ninterface IAuthResponse {\r\n    token: string\r\n}\r\ninterface ICreateUserResponse {\r\n    user: IUser\r\n}\r\nexport interface ITokenDecode {\r\n    user: IUser\r\n    iat: number,\r\n    exp: number\r\n}\r\n\r\nconst token = getAccessToken()\r\nagent.defaults.headers.common.Authorization = `Bearer ${token}`\r\nconst authRequest = (): IAuthRequest => {\r\n    return { type: UserActionsTypes.AUTHENTICATE_REQUEST, payload: null }\r\n}\r\nconst authSuccess = (user: IUser): IAuthSuccess => {\r\n    return { type: UserActionsTypes.AUTHENTICATE_SUCCESS, payload: { user } }\r\n}\r\nconst authFailure = (error: Error | null | string): IAuthFailure => {\r\n    return { type: UserActionsTypes.AUTHENTICATE_FAILURE, payload: { error } }\r\n}\r\nexport const authenticate =\r\n    (login: string, password: string, history: any) =>\r\n        async (dispatch: Dispatch<any>) => {\r\n            try {\r\n                dispatch(authRequest())\r\n                const response: AxiosResponse<IAuthResponse>\r\n                    = await agent\r\n                        .post('/users/authenticate', { login, password })\r\n                const decoded = tokenToStorage(response.data.token)\r\n                dispatch(authSuccess(decoded.user))\r\n                if (response.status === 200) {\r\n                    history.push('/posts')\r\n                }\r\n            } catch (error) {\r\n                dispatch(authFailure(error))\r\n            }\r\n        }\r\n\r\nfunction name() {\r\n\r\n}\r\nconst createUserRequest = (): ICreateUserRequest => {\r\n    return { type: UserActionsTypes.CREATE_USER_REQUEST, payload: null }\r\n}\r\n\r\nconst createUserSuccess = (user: IUser): ICreateUserSuccess => {\r\n    return { type: UserActionsTypes.CREATE_USER_SUCCESS, payload: user }\r\n}\r\n\r\nconst createUserFailure = (error: Error | string | null): ICreateUserFailure => {\r\n    return { type: UserActionsTypes.CREATE_USER_FAILURE, payload: { error } }\r\n}\r\n\r\nexport const createUser = (\r\n    login: string,\r\n    password: string,\r\n    first_name: string | undefined = undefined,\r\n    last_name: string | undefined = undefined,\r\n    age: number | undefined = undefined,\r\n    salary: number | undefined = undefined) =>\r\n    async (dispatch: Dispatch<IUserActions>) => {\r\n        const params = {\r\n            login,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            age, salary\r\n        }\r\n        const parsed = Object\r\n            .entries(params)\r\n            .reduce((acc: any, [key, value]) => {\r\n                if (value !== undefined) {\r\n                    acc[key] = value\r\n                    return acc\r\n                } else {\r\n                    return acc\r\n                }\r\n            }, {})\r\n        try {\r\n\r\n            dispatch(createUserRequest())\r\n            const response: AxiosResponse<ICreateUserResponse>\r\n                = await agent\r\n                    .post('/users/createUser', { ...parsed })\r\n\r\n            dispatch(createUserSuccess(response.data.user))\r\n        } catch (error) {\r\n            dispatch(createUserFailure(error))\r\n        }\r\n    }\r\nconst updateUserReuquest = (): IUpdateUserRequest => {\r\n    return { type: UserActionsTypes.UPDATE_USER_REQUEST, payload: null }\r\n}\r\nconst updateUserSuccess = (user: IUser): IUpdateUserSuccess => {\r\n    return { type: UserActionsTypes.UPDATE_USER_SUCCESS, payload: user }\r\n}\r\nconst updateUserFailure = (error: Error | string | null): IUpdateUserFailure => {\r\n    return { type: UserActionsTypes.UPDATE_USER_FAILURE, payload: { error } }\r\n}\r\nexport const updateUser = (\r\n    login: string,\r\n    password: string,\r\n    first_name: string | undefined = undefined,\r\n    last_name: string | undefined = undefined,\r\n    age: number | undefined = undefined,\r\n    salary: number | undefined = undefined) =>\r\n    async (dispatch: Dispatch<IUserActions>) => {\r\n        const params = {\r\n            login,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            age, salary\r\n        }\r\n        const parsed = Object\r\n            .entries(params)\r\n            .reduce((acc: any, [key, value]) => {\r\n                if (value !== undefined) {\r\n                    acc[key] = value\r\n                    return acc\r\n                } else {\r\n                    return acc\r\n                }\r\n            }, {})\r\n        try {\r\n\r\n            dispatch(updateUserReuquest())\r\n            const response: AxiosResponse<ICreateUserResponse>\r\n                = await agent\r\n                    .post('/users/update', { ...parsed })\r\n\r\n            dispatch(updateUserSuccess(response.data.user))\r\n        } catch (error) {\r\n            dispatch(updateUserFailure(error))\r\n        }\r\n    }\r\nconst getUserByIdRequest = (): IGetUserByIdRequest => {\r\n    return { type: UserActionsTypes.GET_USER_BY_ID_REQUEST, payload: null }\r\n}\r\nconst getUserByIdSuccess = (user: IUser): IGetUserByIdSuccess => {\r\n    return { type: UserActionsTypes.GET_USER_BY_ID_SUCCESS, payload: user }\r\n}\r\nconst getUserByIdFailure = (error: Error | null | string): IGetUserByIdFailure => {\r\n    return { type: UserActionsTypes.GET_USER_BY_ID_FAILURE, payload: { error } }\r\n}\r\nexport const getUserById = (id: number | string) => async (dispatch: Dispatch<IUserActions>) => {\r\n    try {\r\n        dispatch(getUserByIdRequest())\r\n        const response = await agent.get(`/users/userById?id=${id}`)\r\n        dispatch(getUserByIdSuccess(response.data))\r\n    } catch (error) {\r\n        dispatch(getUserByIdFailure(error))\r\n    }\r\n}\r\nconst getAllUsersRequest = (): IGetAllUsersRequest => {\r\n    return { type: UserActionsTypes.GET_ALL_USERS_REQUEST, payload: null }\r\n}\r\nconst getAllUsersSuccess = (users: IUser[]): IGetAllUsersSuccess => {\r\n    return { type: UserActionsTypes.GET_ALL_USERS_SUCCESS, payload: { users } }\r\n}\r\nconst getAllUsersFailure = (error: Error | null | string): IGetAllUsersFailure => {\r\n    return { type: UserActionsTypes.GET_ALL_USERS_FAILURE, payload: { error } }\r\n}\r\ninterface IGetAllUsersResponse {\r\n    users: IUser[]\r\n}\r\nexport const getAllUsers = () => async (dispatch: Dispatch<IUserActions>) => {\r\n    try {\r\n        dispatch(getAllUsersRequest())\r\n        const response: AxiosResponse<IGetAllUsersResponse> = await agent.get('/users/all')\r\n        dispatch(getAllUsersSuccess(response.data.users))\r\n    } catch (error) {\r\n        dispatch(getAllUsersFailure(error))\r\n    }\r\n}\r\n\r\nexport const logout = (): IUserLogOut => {\r\n    localStorage.removeItem('token')\r\n    return { type: UserActionsTypes.LOG_OUT, payload: null }\r\n}\r\nexport const userToStore = (user: ITokenDecode): IUserToStorage => {\r\n    return { type: UserActionsTypes.USER_TO_STORAGE, payload: user?.user }\r\n}","export enum WebSocketStates {\r\n    CONNECTING = 'CONNECTING',\r\n    CONNECTED = 'CONNECTED',\r\n    CONNECTION_ERROR = 'CONNECTION_ERROR'\r\n}\r\nexport interface IwsConnecting { type: WebSocketStates.CONNECTING }\r\nexport interface IwsConnected { type: WebSocketStates.CONNECTED }\r\nexport interface IwsConnectionError { type: WebSocketStates.CONNECTION_ERROR }\r\nexport type IwsActionS = IwsConnected | IwsConnecting | IwsConnectionError","import React, {useState} from 'react';\r\nimport './TopBar.scss';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Menu} from \"semantic-ui-react\";\r\nimport Account from \"./Account/Account\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {logout} from \"../../actions/Users\";\r\n\r\nconst TopBar = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst [state, setState] = useState({activeItem: ''})\r\n\r\n\tconst handleItemClick = () => {\r\n\r\n\r\n\t}\r\n\treturn (\r\n\r\n\t\t<Menu fluid={true}>\r\n\t\t\t<Link to={'/posts'} className={'link'}>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\t\tname='posts'\r\n\t\t\t\t\tactive={state.activeItem === 'posts'}\r\n\t\t\t\t\tonClick={handleItemClick}\r\n\t\t\t\t/>\r\n\t\t\t</Link>\r\n\t\t\t<Link to={'/messages'} className={'link'}>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\t\tname='messages'\r\n\t\t\t\t\tactive={state.activeItem === 'messages'}\r\n\t\t\t\t\tonClick={handleItemClick}\r\n\t\t\t\t/>\r\n\t\t\t</Link>\r\n\t\t\t<Link to={'/users'} className={'link'}>\r\n\t\t\t\t<Menu.Item\r\n\t\t\t\t\tname='users'\r\n\t\t\t\t\tactive={state.activeItem === 'users'}\r\n\t\t\t\t\tonClick={handleItemClick}\r\n\t\t\t\t/>\r\n\t\t\t</Link>\r\n\t\t\t<Menu.Item name={'account'} position=\"right\">\r\n\t\t\t\t<Link to={'/account'} className={'link'}>\r\n\t\t\t\t\t<Account/>\r\n\t\t\t\t</Link>\r\n\t\t\t</Menu.Item>\r\n\t\t\t<Menu.Item\r\n\t\t\t\tname={'Logout'}\r\n\t\t\t\tonClick={() => dispatch(logout())}\r\n\t\t\t/>\r\n\t\t</Menu>\r\n\t);\r\n};\r\n\r\nexport { TopBar };\r\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { getAccessToken } from '../../utils';\r\nimport { Menu } from '../Menu';\r\nimport { TopBar } from '../TopBar';\r\nimport './style.scss';\r\ninterface IProps {\r\n\tpath: string;\r\n\tcomponent: React.FC;\r\n}\r\nconst AuthenticateRoute: React.FC<IProps> = ({ path, component }) => {\r\n\tconst token = getAccessToken();\r\n\tif (token) {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"top-bar\">\r\n\t\t\t\t\t<TopBar />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"menu\">\r\n\t\t\t\t\t\t<Menu />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"route\">\r\n\t\t\t\t\t\t<Route exact path={path} component={component} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\treturn <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport { AuthenticateRoute };\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {authenticate, ITokenDecode, userToStore,} from '../../actions/Users';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport {IRootState} from '../../reducers';\r\nimport {IUsersInitialState} from '../../reducers/Users';\r\nimport {getAccessToken} from '../../utils';\r\nimport './LoginForm.scss';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst LoginForm = () => {\r\n\tconst [state, setstate] = useState({login: '', password: ''});\r\n\tconst [accessToken, setAccessToken] = useState<any>(null);\r\n\tconst {user, error} = useSelector<IRootState, IUsersInitialState>(\r\n\t\t(state) => state.users,\r\n\t);\r\n\tconst dispatch = useDispatch();\r\n\tuseEffect(() => {\r\n\t\tif (!user) {\r\n\t\t\tconst token = getAccessToken();\r\n\t\t\tif (token) {\r\n\t\t\t\tconst decoded = jwt.decode(token);\r\n\t\t\t\tdispatch(userToStore(decoded as ITokenDecode));\r\n\t\t\t}\r\n\t\t}\r\n\t}, [user, error]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!accessToken) {\r\n\t\t\tconst token = getAccessToken();\r\n\t\t\tsetAccessToken(token);\r\n\t\t}\r\n\t}, [user, dispatch]);\r\n\tconst handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst {name, value} = evt.currentTarget;\r\n\t\tsetstate((prev) => ({...prev, [name]: value}));\r\n\t};\r\n\tconst history = useHistory();\r\n\tconst handleSubmit = () => {\r\n\t\tdispatch(authenticate(state.login, state.password, history));\r\n\t\tsetstate({login: '', password: ''});\r\n\t};\r\n\t// @ts-ignore\r\n\t// @ts-ignore\r\n\treturn (\r\n\t\t<div className=\"login-page\">\r\n\t\t\t<div className={'login-from'}>\r\n\t\t\t\t<div className=\"ui middle aligned center aligned grid login-from\">\r\n\t\t\t\t\t<div className=\"column\">\r\n\r\n\t\t\t\t\t\t<form className=\"ui large form\">\r\n\t\t\t\t\t\t\t<div className=\"ui stacked secondary  segment\">\r\n\t\t\t\t\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"ui left icon input\">\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"user icon\"/>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"login\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"login\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Login\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={state.login}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"ui left icon input\">\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"lock icon\"/>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={state.password}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName=\"ui fluid large teal submit button\"\r\n\t\t\t\t\t\t\t\t\tonClick={handleSubmit}>\r\n\t\t\t\t\t\t\t\t\tLogin\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{/*//@-ts-ignore*/}\r\n\t\t\t\t\t\t\t<div className={`ui error message ${error && 'visible'}`}>Ошибка</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t<div className=\"ui message\">\r\n\t\t\t\t\t\t\tHaven't profile? <a href=\"#\">Register</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LoginForm;\r\n","export const MessageActions = {\r\n    CREATE_MESSAGE: 'CREATE_MESSAGE',\r\n    GET_ALL_MESSAGES: 'GET_ALL_MESSAGES',\r\n    GET_MESSAGE_BY_ID: 'GET_MESSAGE_BY_ID',\r\n    REMOVE_MESSAGE: 'REMOVE_MESSAGE',\r\n    EDIT_MESSAGE: 'EDIT_MESSAGE',\r\n    NEW_USER_ONLINE: 'NEW_USER_ONLINE',\r\n    USER_ARE_DISCONNECT: 'USER_ARE_DISCONNECT',\r\n    CHANGE_WS_STATUS: 'CHANGE_WS_STATUS',\r\n    WS_CONNECTED: 'WS_CONNECTED',\r\n    WS_DISCONNECT: 'WS_DISCONNECT',\r\n    WS_CLOSED: 'WS_CLOSED',\r\n    TYPING: 'TYPING'\r\n}\r\nexport interface IMessageSent {\r\n\r\n}\r\nexport interface IMessageEdit {\r\n\r\n}\r\nexport interface IMessageRemove {\r\n\r\n}\r\nexport interface IMessageIncome {\r\n\r\n}\r\n","import { IUser } from \"../Users/interfaces\"\r\nimport { MessageActions } from \"./interface\"\r\n\r\n\r\nexport const messageGetAll = (message: any) => {\r\n    return { type: MessageActions.GET_ALL_MESSAGES, payload: { message } }\r\n}\r\nexport const messageCreate = (message: any) => {\r\n    return { type: MessageActions.CREATE_MESSAGE, payload: { message } }\r\n}\r\nexport const messageRemove = (id: any) => {\r\n    return { type: MessageActions.REMOVE_MESSAGE, payload: { id } }\r\n}\r\nexport const messageEdit = (message: any) => {\r\n    return { type: MessageActions.EDIT_MESSAGE, payload: { message } }\r\n}\r\nexport const getOnlineUsers = (users: any) => {\r\n    return { type: MessageActions.NEW_USER_ONLINE, payload: { users } }\r\n}\r\nexport const userAreDisconnected = (user: any) => {\r\n    return { type: MessageActions.USER_ARE_DISCONNECT, payload: { user: JSON.parse(user) } }\r\n}\r\nexport const changeWSstatus = (status: string) => {\r\n    return { type: MessageActions.CHANGE_WS_STATUS, payload: status }\r\n}\r\nexport const typing = (whoTyping: IUser | null) => {\r\n    return { type: MessageActions.TYPING, payload: { user: whoTyping } }\r\n}\r\n","import { IwsActionS, WebSocketStates } from \"./interfaces\"\r\n\r\nexport const wsConnected = (): IwsActionS => {\r\n    return { type: WebSocketStates.CONNECTED }\r\n}\r\nexport const wsConnecting = (): IwsActionS => {\r\n    return { type: WebSocketStates.CONNECTING }\r\n}\r\nexport const wsConnectionError = (): IwsActionS => {\r\n    return { type: WebSocketStates.CONNECTION_ERROR }\r\n}","import { IUserLogOut } from \"../Users/interfaces\"\r\n\r\nexport enum PostsActions {\r\n    GET_ALL_POSTS_REQUEST = 'GET_ALL_POSTS_REQUEST',\r\n    GET_ALL_POSTS_SUCCESS = 'GET_ALL_POSTS_SUCCESS',\r\n    GET_ALL_POSTS_FAILURE = 'GET_ALL_POSTS_FAILURE',\r\n    UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST',\r\n    UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS',\r\n    UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE',\r\n    CREATE_POST_REQUEST = 'CREATE_POST_REQUEST',\r\n    CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS',\r\n    CREATE_POST_FAILURE = 'CREATE_POST_FAILURE',\r\n    REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST',\r\n    REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS',\r\n    REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE',\r\n    GET_POST_BY_ID_REQUEST = 'GET_POST_BY_ID_REQUEST',\r\n    GET_POST_BY_ID_SUCCESS = 'GET_POST_BY_ID_SUCCESS',\r\n    GET_POST_BY_ID_FAILURE = 'GET_POST_BY_ID_FAILURE',\r\n    POST_LIKE_REQUEST = 'POST_LIKE_REQUEST',\r\n    POST_LIKE_SUCCESS = 'POST_LIKE_SUCCESS',\r\n    POST_LIKE_FAILURE = 'POST_LIKE_FAILURE',\r\n}\r\n\r\nexport interface Ipost {\r\n    id: number\r\n    createdAt: string\r\n    content: string\r\n    owner_id: string | number\r\n    post_id: string | number\r\n    media_type: string\r\n    media: string,\r\n    post_likes: number | string\r\n    updatedAt: string\r\n    removed: boolean\r\n    post_liked_users: []\r\n}\r\nexport interface IgetAllPostsRequest { type: PostsActions.GET_ALL_POSTS_REQUEST }\r\nexport interface IgetAllPostsSuccess { type: PostsActions.GET_ALL_POSTS_SUCCESS, payload: { posts: Ipost[] } }\r\nexport interface IgetAllPostsFailure { type: PostsActions.GET_ALL_POSTS_FAILURE, payload: { error: Error | string | null } }\r\n\r\nexport interface IgetPostByIdRequest { type: PostsActions.GET_POST_BY_ID_REQUEST }\r\nexport interface IgetPostByIdSuccess { type: PostsActions.GET_POST_BY_ID_SUCCESS, payload: { post: Ipost } }\r\nexport interface IgetPostByIdFailure { type: PostsActions.GET_POST_BY_ID_FAILURE, payload: { error: Error | string | null } }\r\n\r\nexport interface IupdatePostRequest { type: PostsActions.UPDATE_POST_REQUEST }\r\nexport interface IupdatePostSuccess { type: PostsActions.UPDATE_POST_SUCCESS, payload: { post: Ipost } }\r\nexport interface IupdatePostFailure { type: PostsActions.UPDATE_POST_FAILURE, payload: { error: Error | string | null } }\r\n\r\nexport interface IremovePostRequest { type: PostsActions.REMOVE_POST_REQUEST }\r\nexport interface IremovePostSuccess { type: PostsActions.REMOVE_POST_SUCCESS, payload: { id: string | number } }\r\nexport interface IremovePostFailure { type: PostsActions.REMOVE_POST_FAILURE, payload: { error: Error | string | null } }\r\n\r\nexport interface IlikePostRequest { type: PostsActions.POST_LIKE_REQUEST }\r\nexport interface IlikePostSuccess { type: PostsActions.POST_LIKE_SUCCESS, payload: { post: Ipost } }\r\nexport interface IlikePostFailure { type: PostsActions.POST_LIKE_FAILURE, payload: { error: Error | string | null } }\r\n\r\nexport interface IcreatePostRequest { type: PostsActions.CREATE_POST_REQUEST }\r\nexport interface IcreatePostSuccess { type: PostsActions.CREATE_POST_SUCCESS, payload: { post: Ipost } }\r\nexport interface IcreatePostFailure { type: PostsActions.CREATE_POST_FAILURE, payload: { error: Error | string | null } }\r\n\r\n\r\nexport type IpostActions =\r\n    IgetAllPostsRequest |\r\n    IgetAllPostsSuccess |\r\n    IgetAllPostsFailure |\r\n    IgetPostByIdRequest |\r\n    IgetPostByIdSuccess |\r\n    IgetPostByIdFailure |\r\n    IupdatePostRequest |\r\n    IupdatePostSuccess |\r\n    IupdatePostFailure |\r\n    IremovePostRequest |\r\n    IremovePostSuccess |\r\n    IremovePostFailure |\r\n    IcreatePostRequest |\r\n    IcreatePostSuccess |\r\n    IcreatePostFailure |\r\n    IUserLogOut |\r\n    IlikePostRequest |\r\n    IlikePostSuccess |\r\n    IlikePostFailure","import React, {ReactText, useCallback, useEffect, useRef, useState,} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n\tchangeWSstatus,\r\n\tgetOnlineUsers,\r\n\tmessageCreate,\r\n\tmessageEdit,\r\n\tmessageGetAll,\r\n\tmessageRemove,\r\n\ttyping,\r\n\tuserAreDisconnected,\r\n} from '../../actions/Messages';\r\nimport {MessageActions} from '../../actions/Messages/interface';\r\nimport {wsConnected, wsConnecting, wsConnectionError,} from '../../actions/Websocket';\r\nimport {IRootState} from '../../reducers';\r\n\r\nimport {IInitialMessagesState} from '../../reducers/Messages';\r\nimport {IUsersInitialState} from '../../reducers/Users';\r\nimport {IWSinitialState} from '../../reducers/Websocket';\r\nimport {getAccessToken, setFocus} from '../../utils';\r\nimport './Messages.scss';\r\nimport {websocketRoute} from \"../../api/routes\";\r\n\r\nconst MessagesView: React.FC = () => {\r\n\tconst wsRef = useRef<WebSocket | null>(null);\r\n\tconst [state, setState] = useState({content: '', id: 0});\r\n\tconst dispatch = useDispatch();\r\n\tconst {allMessages, activeUsers} = useSelector<IRootState,\r\n\t\tIInitialMessagesState\r\n\t>((state) => state.messages);\r\n\tconst { wsState } = useSelector<IRootState, IWSinitialState>(\r\n\t\t(state) => state.websocketState,\r\n\t);\r\n\tconst { user } = useSelector<IRootState, IUsersInitialState>(\r\n\t\t(state) => state.users,\r\n\t);\r\n\tconst { who_type } = useSelector<IRootState, IInitialMessagesState>(\r\n\t\t(state) => state.messages,\r\n\t);\r\n\tconst [editing, setEditing] = useState(false);\r\n\tconst setUpWs = useCallback(\r\n\t\t(ws: WebSocket) => {\r\n\t\t\tdispatch(wsConnecting());\r\n\t\t\tws.onopen = () => {\r\n\t\t\t\tdispatch(wsConnected());\r\n\t\t\t\tdispatch(changeWSstatus(MessageActions.WS_CONNECTED));\r\n\t\t\t\tconst token = getAccessToken();\r\n\t\t\t\tws.send(\r\n\t\t\t\t\tJSON.stringify({\r\n\t\t\t\t\t\ttype: MessageActions.NEW_USER_ONLINE,\r\n\t\t\t\t\t\ttoken,\r\n\t\t\t\t\t}),\r\n\t\t\t\t);\r\n\t\t\t\tws.send(\r\n\t\t\t\t\tJSON.stringify({ type: MessageActions.GET_ALL_MESSAGES, token }),\r\n\t\t\t\t);\r\n\t\t\t\twsRef.current = ws;\r\n\t\t\t};\r\n\t\t\tws.onmessage = async (evt) => {\r\n\t\t\t\tconst data = JSON.parse(evt.data);\r\n\t\t\t\tconsole.log(data);\r\n\r\n\t\t\t\tswitch (data.type) {\r\n\t\t\t\t\tcase MessageActions.GET_ALL_MESSAGES:\r\n\t\t\t\t\t\tdispatch(messageGetAll(data.messages));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase MessageActions.REMOVE_MESSAGE:\r\n\t\t\t\t\t\tdispatch(messageRemove(data.id));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase MessageActions.EDIT_MESSAGE:\r\n\t\t\t\t\t\tdispatch(messageEdit(data.message));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase MessageActions.CREATE_MESSAGE:\r\n\t\t\t\t\t\tdispatch(messageCreate(data.message));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase MessageActions.NEW_USER_ONLINE:\r\n\t\t\t\t\t\tconst { activeUsers } = data;\r\n\t\t\t\t\t\tconst parsed = Object.values(activeUsers).map((o) => {\r\n\t\t\t\t\t\t\treturn JSON.parse(o as string);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdispatch(getOnlineUsers(parsed));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase MessageActions.USER_ARE_DISCONNECT:\r\n\t\t\t\t\t\tdispatch(userAreDisconnected(data.user));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase MessageActions.TYPING:\r\n\t\t\t\t\t\tdispatch(typing(data.user));\r\n\t\t\t\t\t\tconsole.log(data);\r\n\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tws.onclose = () => {\r\n\t\t\t\tdispatch(changeWSstatus(MessageActions.WS_DISCONNECT));\r\n\t\t\t\tws.send(JSON.stringify({ type: MessageActions.USER_ARE_DISCONNECT }));\r\n\t\t\t\twsRef.current = null;\r\n\t\t\t};\r\n\t\t\tws.onerror = async (evt) => {\r\n\t\t\t\tdispatch(wsConnectionError());\r\n\t\t\t};\r\n\t\t},\r\n\t\t[dispatch],\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tconst ws = new WebSocket(websocketRoute as string);\r\n\t\tsetUpWs(ws);\r\n\t\treturn () => {\r\n\t\t\twsRef.current = null;\r\n\t\t\tws.close(1000);\r\n\t\t};\r\n\t}, [setUpWs]);\r\n\r\n\tconst contentRef = useRef<HTMLInputElement | null>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tcontentRef.current?.focus();\r\n\t}, [allMessages]);\r\n\tconst token = getAccessToken();\r\n\tconst handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst { value } = evt.target;\r\n\t\tsetState((prev) => ({ ...prev, content: value }));\r\n\t\twsRef.current?.send(\r\n\t\t\tJSON.stringify({\r\n\t\t\t\ttype: MessageActions.TYPING,\r\n\t\t\t\ttoken,\r\n\t\t\t}),\r\n\t\t);\r\n\t\tdispatch({\r\n\t\t\ttype: 'MESSAGE_CONTENT_CHANGE',\r\n\t\t\tpayload: {\r\n\t\t\t\tvalue,\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleSubmit = (evt: React.FormEvent) => {\r\n\t\tevt.preventDefault();\r\n\t\tconst token = getAccessToken();\r\n\t\tsetFocus();\r\n\t\tif (!editing) {\r\n\t\t\twsRef.current?.send(\r\n\t\t\t\tJSON.stringify({\r\n\t\t\t\t\tmessage_id: Math.random() * 100000,\r\n\t\t\t\t\ttext_content: state.content,\r\n\t\t\t\t\treplied_to_text: '',\r\n\t\t\t\t\treplied_to_id: '',\r\n\t\t\t\t\ttype: MessageActions.CREATE_MESSAGE,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t\tsetState({ content: '', id: 0 });\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\thandleSubmitEdit(state.id);\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tlet timeOut: any;\r\n\t\tif (who_type) {\r\n\t\t\ttimeOut = setTimeout(() => {\r\n\t\t\t\tdispatch(typing(null));\r\n\t\t\t}, 4000);\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\ttimeOut && clearTimeout(timeOut);\r\n\t\t};\r\n\t}, [who_type]);\r\n\tconst hendleRemove = (id: string | number) => {\r\n\t\twsRef.current?.send(\r\n\t\t\tJSON.stringify({ type: MessageActions.REMOVE_MESSAGE, id }),\r\n\t\t);\r\n\t};\r\n\tconst handleSubmitEdit = (id: ReactText) => {\r\n\t\twsRef.current?.send(\r\n\t\t\tJSON.stringify({\r\n\t\t\t\ttype: MessageActions.EDIT_MESSAGE,\r\n\t\t\t\tid,\r\n\t\t\t\ttext_content: state.content,\r\n\t\t\t}),\r\n\t\t);\r\n\t\tsetState({ content: '', id: 0 });\r\n\t\tsetEditing(false);\r\n\t};\r\n\tconst handleEdit = (message: any) => {\r\n\t\tsetState({ content: message.text_content, id: message.id });\r\n\t\tsetEditing(true);\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"messages\">\r\n\t\t\t<div className=\"messages-container\">\r\n\t\t\t\t{allMessages.map((o) => {\r\n\t\t\t\t\tif (o.owner_fullname === `${user?.first_name} ${user?.last_name}`) {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={Math.random() * 919191} className=\"message-item-right\">\r\n\t\t\t\t\t\t\t\t<span className={'message-owner'}>\r\n\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"trash alternate icon\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => hendleRemove(o.id)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<i className=\"edit icon\" onClick={() => handleEdit(o)} />\r\n\t\t\t\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t\t\t\t<p className={'message-text'}>{o.text_content}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={Math.random() * 919191} className=\"message-item\">\r\n\t\t\t\t\t\t\t<span className={'message-owner'}>\r\n\t\t\t\t\t\t\t\t<span style={{ marginLeft: 5 }}>{o.owner_fullname}</span>\r\n\t\t\t\t\t\t\t\t<span style={{ marginLeft: 20 }}>\r\n\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"trash alternate icon\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => hendleRemove(o.id)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<i className=\"edit icon\" onClick={() => handleEdit(o)} />\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<p className={'message-text'}>{o.text_content}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t{who_type && who_type?.id !== user?.id\r\n\t\t\t\t? `${who_type?.first_name} is typing...`\r\n\t\t\t\t: ''}\r\n\t\t\t<div className=\"message-send-form\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tref={contentRef}\r\n\t\t\t\t\tname=\"content\"\r\n\t\t\t\t\tvalue={state.content}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button onClick={handleSubmit}>\r\n\t\t\t\t\t<i className=\"paper plane outline icon\" />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MessagesView;\r\n","import { AxiosResponse } from \"axios\"\r\nimport { Dispatch } from \"react\"\r\nimport agent from \"../../api\"\r\nimport { getAccessToken } from \"../../utils\"\r\nimport { logout } from \"../Users\"\r\nimport {\r\n    IcreatePostFailure,\r\n    IcreatePostRequest,\r\n    IcreatePostSuccess,\r\n    IgetAllPostsFailure,\r\n    IgetAllPostsRequest,\r\n    IgetAllPostsSuccess,\r\n    IgetPostByIdFailure,\r\n    IgetPostByIdRequest,\r\n    IgetPostByIdSuccess,\r\n    IpostActions,\r\n    IremovePostFailure,\r\n    IremovePostRequest,\r\n    IremovePostSuccess,\r\n    IupdatePostFailure,\r\n    IupdatePostRequest,\r\n    IupdatePostSuccess,\r\n    PostsActions,\r\n    Ipost,\r\n    IlikePostRequest,\r\n    IlikePostSuccess,\r\n    IlikePostFailure,\r\n} from \"./interface\"\r\ninterface IPostsResponse {\r\n    posts: Ipost[]\r\n\r\n}\r\n\r\nagent.interceptors.request.use((accepted) => {\r\n    const token = getAccessToken()\r\n    accepted.headers = { ...accepted.headers, 'Authorization': `Bearer ${token}` }\r\n    return accepted\r\n}, (rejrcted) => {\r\n    console.log('rejrcted', rejrcted)\r\n    return Promise.reject(rejrcted)\r\n})\r\nexport const getAllPostsRequest = (): IgetAllPostsRequest => {\r\n    return { type: PostsActions.GET_ALL_POSTS_REQUEST }\r\n}\r\nexport const getAllPostsSuccess = (posts: Ipost[]): IgetAllPostsSuccess => {\r\n    return { type: PostsActions.GET_ALL_POSTS_SUCCESS, payload: { posts } }\r\n}\r\nexport const getAllPostsFailure = (error: Error | string | null): IgetAllPostsFailure => {\r\n    return { type: PostsActions.GET_ALL_POSTS_FAILURE, payload: { error } }\r\n}\r\nexport const getAllPosts = () => async (dispatch: Dispatch<IpostActions>) => {\r\n    try {\r\n        dispatch(getAllPostsRequest())\r\n        const { data: { posts } }: AxiosResponse<IPostsResponse> = await agent.get('/posts/getAll')\r\n        dispatch(getAllPostsSuccess(posts))\r\n    } catch (error) {\r\n        dispatch(getAllPostsFailure(error))\r\n        checkUnauthorizedResponse(error, dispatch)\r\n    }\r\n}\r\nexport const createPostRequest = (): IcreatePostRequest => {\r\n    return { type: PostsActions.CREATE_POST_REQUEST }\r\n}\r\nexport const createPostSuccess = (post: Ipost): IcreatePostSuccess => {\r\n    return { type: PostsActions.CREATE_POST_SUCCESS, payload: { post } }\r\n}\r\nexport const createPostFailure = (error: null | string | Error): IcreatePostFailure => {\r\n    return { type: PostsActions.CREATE_POST_FAILURE, payload: { error } }\r\n}\r\nexport const createPost = (content: string, file: File | null) => async (dispatch: Dispatch<IpostActions>, getState: any) => {\r\n    try {\r\n        const { user } = getState().users\r\n        dispatch(createPostRequest())\r\n        const data = new FormData()\r\n        data.append('content', content)\r\n        data.append('owner_id', user.id)\r\n        if (file) {\r\n            data.append('post_media', file)\r\n        }\r\n        const response: AxiosResponse<Ipost> = await agent.post('/posts/createPost', data)\r\n        dispatch(createPostSuccess(response.data))\r\n    } catch (error) {\r\n        dispatch(createPostFailure(error))\r\n    }\r\n}\r\nexport const updatePostRequest = (): IupdatePostRequest => {\r\n    return { type: PostsActions.UPDATE_POST_REQUEST }\r\n}\r\nexport const updatePostSuccess = (post: Ipost): IupdatePostSuccess => {\r\n    return { type: PostsActions.UPDATE_POST_SUCCESS, payload: { post } }\r\n}\r\nexport const updaatePostFailure = (error: Error | string | null): IupdatePostFailure => {\r\n    return { type: PostsActions.UPDATE_POST_FAILURE, payload: { error } }\r\n}\r\nexport const updatePost = (content: string, file: File) => async (dispatch: Dispatch<IpostActions>) => {\r\n    try {\r\n        dispatch(updatePostRequest())\r\n        const data = new FormData()\r\n        data.append('content', content)\r\n        data.append('file', file)\r\n        const response: AxiosResponse<Ipost> = await agent.post('/posts/update', { data })\r\n        dispatch(updatePostSuccess(response.data))\r\n    } catch (error) {\r\n        dispatch(updaatePostFailure(error))\r\n    }\r\n}\r\nexport const getPostByIdRequest = (): IgetPostByIdRequest => {\r\n    return { type: PostsActions.GET_POST_BY_ID_REQUEST }\r\n}\r\nexport const getPostByIdSuccess = (post: Ipost): IgetPostByIdSuccess => {\r\n    return { type: PostsActions.GET_POST_BY_ID_SUCCESS, payload: { post } }\r\n}\r\nexport const getPostByIdFailure = (error: Error | string | null): IgetPostByIdFailure => {\r\n    return { type: PostsActions.GET_POST_BY_ID_FAILURE, payload: { error } }\r\n}\r\nexport const getPostById = (id: string | number) => async (dispatch: Dispatch<IpostActions>) => {\r\n    try {\r\n        dispatch(getPostByIdRequest())\r\n        const response: AxiosResponse<Ipost> = await agent.get(`/getbyId?id=${id}`)\r\n        dispatch(getPostByIdSuccess(response.data))\r\n    } catch (error) {\r\n        dispatch(getAllPostsFailure(error))\r\n    }\r\n}\r\nexport const removePostRequest = (): IremovePostRequest => {\r\n    return { type: PostsActions.REMOVE_POST_REQUEST }\r\n}\r\nexport const removePostSuccess = (id: string | number): IremovePostSuccess => {\r\n    return { type: PostsActions.REMOVE_POST_SUCCESS, payload: { id } }\r\n}\r\nexport const removePostFailure = (error: Error | string | null): IremovePostFailure => {\r\n    return { type: PostsActions.REMOVE_POST_FAILURE, payload: { error } }\r\n}\r\nexport const removePost = (id: number | string) => async (dispatch: Dispatch<IpostActions>) => {\r\n    try {\r\n        dispatch(removePostRequest())\r\n        const response: AxiosResponse<any> = await agent.delete(`/posts/delete?id=${id}`)\r\n        dispatch(removePostSuccess(response.data.id))\r\n    } catch (error) {\r\n        dispatch(removePostFailure(error))\r\n    }\r\n}\r\nconst checkUnauthorizedResponse = (error: any, dispatch: any) => {\r\n    if (error.response.status === 401) {\r\n        dispatch(logout())\r\n    }\r\n}\r\nconst postLikeRequest = (): IlikePostRequest => {\r\n    return { type: PostsActions.POST_LIKE_REQUEST }\r\n}\r\nconst postLikeSuccess = (post: Ipost): IlikePostSuccess => {\r\n    return { type: PostsActions.POST_LIKE_SUCCESS, payload: { post } }\r\n}\r\nconst postLikeFailure = (error: Error | string | null): IlikePostFailure => {\r\n    return { type: PostsActions.POST_LIKE_FAILURE, payload: { error } }\r\n}\r\n\r\nexport const postLike = (post_id: string | number) => async (dispatch: Dispatch<IpostActions>, getState: any) => {\r\n    try {\r\n        const { user: { id } } = getState().users\r\n        dispatch(postLikeRequest())\r\n        const { data }: AxiosResponse<Ipost> = await agent.post('/posts/like', { user_id: id, post_id })\r\n        console.log(data)\r\n\r\n        dispatch(postLikeSuccess(data))\r\n    } catch (error) {\r\n        dispatch(postLikeFailure(error))\r\n    }\r\n}","import React from 'react';\r\nimport {Card, Icon, Image} from 'semantic-ui-react';\r\nimport './style.scss';\r\ninterface IPostCard {\r\n\tpostImage: string;\r\n\tpostContent: string;\r\n\tpostOwner: string;\r\n\tpostCreatedAt: string;\r\n\tpostLikes?: number | string;\r\n\tonLike: (id: string | number) => void;\r\n\tpostId: number | string;\r\n}\r\nconst PostCard: React.FC<IPostCard> = ({\r\n\tpostImage,\r\n\tpostContent,\r\n\tpostOwner,\r\n\tpostCreatedAt,\r\n\tpostLikes,\r\n\tonLike,\r\n\tpostId,\r\n}) => (\r\n\t<Card centered={true}  className={'card'}>\r\n\t\t<Card.Header className={'header-r'}>\r\n\t\t\tHello\r\n\t\t</Card.Header>\r\n\t\t<Image src={postImage} ui={true} className={'image'}/>\r\n\t\t<Card.Content>\r\n\t\t\t<Card.Header>{postOwner}</Card.Header>\r\n\t\t\t<Card.Meta>\r\n\t\t\t\t<span className=\"date\">{postCreatedAt}</span>\r\n\t\t\t</Card.Meta>\r\n\t\t\t<Card.Description>{postContent}</Card.Description>\r\n\t\t</Card.Content>\r\n\t\t<Card.Content extra>\r\n\t\t\t<a>\r\n\t\t\t\t<Icon name=\"like\" onClick={() => onLike(postId)}/>\r\n\t\t\t\t{postLikes}\r\n\t\t\t</a>\r\n\t\t</Card.Content>\r\n\t</Card>\r\n);\r\n\r\nexport default PostCard;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getAllPosts, postLike} from '../../actions/Posts';\r\nimport {IRootState} from '../../reducers';\r\nimport {IinitialPostsState} from '../../reducers/Posts';\r\nimport PostCard from '../../shared/Card';\r\nimport './Posts.scss';\r\nimport {filePath} from \"../../api/routes\";\r\n\r\nconst PostsList = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst {posts} = useSelector<IRootState, IinitialPostsState>(\r\n\t\t(state) => state.posts,\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tif (posts.length === 0) {\r\n\t\t\tdispatch(getAllPosts());\r\n\t\t}\r\n\r\n\t\treturn () => {};\r\n\t}, [posts]);\r\n\tconst handleLike = (id: string | number) => {\r\n\t\tconsole.log(id);\r\n\r\n\t\tdispatch(postLike(id));\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"posts-page\">\r\n\t\t\t<div className=\"posts\">\r\n\t\t\t\t{posts?.map((post) => (\r\n\t\t\t\t\t<PostCard\r\n\t\t\t\t\t\tkey={post.id}\r\n\t\t\t\t\t\tpostId={post.post_id}\r\n\t\t\t\t\t\tpostContent={post.content}\r\n\t\t\t\t\t\tpostCreatedAt={post.createdAt}\r\n\t\t\t\t\t\tpostImage={`${filePath}/${post.media}`}\r\n\t\t\t\t\t\tpostOwner={`${post.owner_id}`}\r\n\t\t\t\t\t\tpostLikes={post.post_likes}\r\n\t\t\t\t\t\tonLike={(id: string | number) => handleLike(id)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PostsList;\r\n","import React from 'react';\r\nimport {IUserList} from './model';\r\nimport './UserList.scss';\r\n\r\nconst UserListView: React.FC<IUserList> = ({users}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"ui four column grid\">\r\n\r\n\t\t\t\t\t{users && users.map(user =>\r\n\t\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\t\t<div className=\"ui fluid card\">\r\n\t\t\t\t\t\t\t\t<div className=\"image\">\r\n\t\t\t\t\t\t\t\t\t<img src={`${process.env.REACT_APP_FILE_PATH}/${user.avatar_image}`}/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t\t\t<a className=\"header\">{user.first_name} {user.last_name}</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>)}\r\n\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport { UserListView };\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllUsers } from '../../actions/Users';\r\nimport { IRootState } from '../../reducers';\r\nimport { IUsersInitialState } from '../../reducers/Users';\r\nimport { UserListView } from './UserListView';\r\n\r\nconst UserList: React.FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst { allUsers } = useSelector<IRootState, IUsersInitialState>(\r\n\t\t(state) => state.users,\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tif (!allUsers) {\r\n\t\t\tdispatch(getAllUsers());\r\n\t\t}\r\n\t}, [dispatch, allUsers]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\tUser-List\r\n\t\t\t\r\n\t\t\t<UserListView users={allUsers} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport { UserList };\r\n","import React, { ChangeEvent, FormEvent, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createPost } from '../../actions/Posts';\r\nimport './PostCreate.scss';\r\n\r\nconst PostCreateForm = () => {\r\n\tconst [state, setState] = useState({ file: null, content: '' });\r\n\tconst fileRef = useRef<any>(null);\r\n\tconst dispatch = useDispatch();\r\n\tconst handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst { name, value } = evt.currentTarget;\r\n\t\tif (name === 'file') {\r\n\t\t\tconst [file] = fileRef?.current?.files;\r\n\t\t\tsetState((prev) => ({ ...prev, [name]: file }));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetState((prev) => ({ ...prev, [name]: value }));\r\n\t};\r\n\tconst handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\r\n\t\tevt.preventDefault();\r\n\t\tif (!state.file) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdispatch(createPost(state.content, state.file));\r\n\t\tfileRef.current = '';\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"body\">\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<h6>Create new post</h6>\r\n\t\t\t\t{/* <input type=\"text\" placeholder=\"For ex. CodingArtist\" />\r\n\t\t\t\t<h6>Who are you?</h6>\r\n\t\t\t\t<input type=\"radio\" name=\"job\" id=\"developer\" />\r\n\t\t\t\t<input type=\"radio\" name=\"job\" id=\"designer\" /> */}\r\n\t\t\t\t<h6>Text content</h6>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"content\"\r\n\t\t\t\t\tid=\"content\"\r\n\t\t\t\t\tvalue={state.content}\r\n\t\t\t\t/>\r\n\t\t\t\t<h6>File</h6>\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\tref={fileRef}\r\n\t\t\t\t\tname=\"file\"\r\n\t\t\t\t\tid=\"file\"\r\n\t\t\t\t/>\r\n\t\t\t\t<a href=\"#\" className=\"submit\">\r\n\t\t\t\t\tSUBMIT\r\n\t\t\t\t</a>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PostCreateForm;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PostCreateForm from '../../components/PostCreateForm'\r\nimport { TopBar } from '../../components/TopBar';\r\n\r\nconst Home = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<PostCreateForm />\r\n\t\t</div>\r\n\t); \r\n};\r\n\r\nexport { Home };\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    Route,\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect,\r\n} from 'react-router-dom';\r\nimport {AuthenticateRoute} from './components/AuthenticateRoute/AuthenticateRoute';\r\nimport LoginForm from './components/LoginForm';\r\nimport MessagesView from './components/Messages';\r\nimport PostsList from './components/Posts';\r\nimport {UserList} from './components/UsersList';\r\nimport {Home} from './layouts/Home';\r\nimport {IRootState} from './reducers';\r\nimport {IUsersInitialState} from './reducers/Users';\r\nimport {getAccessToken} from './utils';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport {ITokenDecode, userToStore} from './actions/Users';\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const {user} = useSelector<IRootState, IUsersInitialState>(\r\n        (state) => state.users,\r\n    );\r\n    useEffect(() => {\r\n        if (!user) {\r\n            const token = getAccessToken();\r\n            if (token) {\r\n                const decoded = jwt.decode(token);\r\n                dispatch(userToStore(decoded as ITokenDecode));\r\n            }\r\n        }\r\n    }, [user, dispatch]);\r\n    return (\r\n        <>\r\n            <Router>\r\n                \r\n                <Switch>\r\n                    <Route path=\"/login\" exact component={LoginForm}/>\r\n                    <AuthenticateRoute path=\"/messages\" component={MessagesView}/>\r\n                    <AuthenticateRoute path=\"/users\" component={UserList}/>\r\n                    <AuthenticateRoute path=\"/posts\" component={PostsList}/>\r\n                    <AuthenticateRoute path=\"/home\" component={Home}/>\r\n                    <Redirect to=\"/login\"/>\r\n                </Switch>\r\n            </Router>\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL as string,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { IInitialMessagesState, messagesReducer } from \"./Messages\"\r\nimport { IinitialPostsState, postsReducer } from \"./Posts\"\r\nimport { IUsersInitialState, usersReducer } from \"./Users\"\r\nimport { IWSinitialState, wsReducer } from \"./Websocket\"\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nexport interface IRootState {\r\n    users: IUsersInitialState,\r\n    messages: IInitialMessagesState,\r\n    websocketState: IWSinitialState,\r\n    posts: IinitialPostsState\r\n}\r\n\r\nexport const rootReducer = (history: any) =>\r\n    combineReducers({\r\n        router:connectRouter(history)  ,\r\n        messages: messagesReducer,\r\n        users: usersReducer,\r\n        websocketState: wsReducer,\r\n        posts: postsReducer\r\n    })","import { Reducer } from \"react\"\r\nimport { MessageActions } from \"../../actions/Messages/interface\"\r\nimport { IUser } from \"../../actions/Users/interfaces\"\r\n\r\nexport interface IMessage {\r\n    id: string | number\r\n    text_content: string\r\n    reciever_id: string | number\r\n    owner_fullname: string\r\n}\r\nexport interface IInitialMessagesState {\r\n    allMessages: Array<IMessage>\r\n    edit_content: string\r\n    content: string,\r\n    activeUsers: IUser[],\r\n    status: string | null\r\n    who_type: IUser | null\r\n}\r\nconst initialMessageState: IInitialMessagesState = {\r\n    allMessages: [], edit_content: '', content: '', activeUsers: [], status: null, who_type: null\r\n}\r\nexport const messagesReducer: Reducer<IInitialMessagesState, any> =\r\n    (state = initialMessageState, action: any) => {\r\n        switch (action.type) {\r\n            case MessageActions.GET_ALL_MESSAGES: {\r\n                const { message } = action.payload\r\n                return {\r\n                    ...state,\r\n                    allMessages: [...message],\r\n                }\r\n            }\r\n            case MessageActions.REMOVE_MESSAGE: {\r\n                const { id } = action.payload\r\n                return {\r\n                    ...state,\r\n                    allMessages: [...state.allMessages].filter(o => o.id !== id)\r\n                }\r\n            }\r\n            case MessageActions.EDIT_MESSAGE: {\r\n                const { message } = action.payload\r\n                return {\r\n                    ...state,\r\n                    allMessages: [{ ...message },\r\n                    ...state.allMessages.filter(o => o.id !== message.id)]\r\n                }\r\n            }\r\n            case MessageActions.CREATE_MESSAGE: {\r\n                const { message } = action.payload\r\n                return { ...state, allMessages: [...state.allMessages, { ...message }] }\r\n            }\r\n            case MessageActions.CHANGE_WS_STATUS: {\r\n                return { ...state, status: action.payload }\r\n            }\r\n            case MessageActions.NEW_USER_ONLINE:\r\n                {\r\n                    const { users } = action.payload\r\n                    return { ...state, activeUsers: [...users] }\r\n                }\r\n            case MessageActions.USER_ARE_DISCONNECT: {\r\n                const { user } = action.payload\r\n                return { ...state, activeUsers: [...state.activeUsers.filter(o => o.id !== user.id)] }\r\n            }\r\n            case MessageActions.TYPING:\r\n                return { ...state, who_type: action.payload.user }\r\n            default:\r\n                return state\r\n        }\r\n    } ","import { Reducer } from \"react\"\r\nimport { Ipost, IpostActions, PostsActions } from \"../../actions/Posts/interface\"\r\n\r\nexport interface IinitialPostsState {\r\n    posts: Ipost[]\r\n    postById: Ipost | null\r\n    loading: boolean\r\n    error: Error | string | null\r\n}\r\nconst initialPostsState: IinitialPostsState = {\r\n    posts: [], postById: null, loading: false, error: null\r\n}\r\nexport const postsReducer: Reducer<IinitialPostsState, IpostActions> = (state = initialPostsState, action: IpostActions) => {\r\n    switch (action.type) {\r\n        case PostsActions.GET_ALL_POSTS_REQUEST:\r\n            return { ...state, loading: true }\r\n        case PostsActions.GET_ALL_POSTS_SUCCESS:\r\n            return { ...state, posts: [...action.payload.posts], loading: false }\r\n        case PostsActions.GET_ALL_POSTS_FAILURE:\r\n            return { ...state, error: action.payload.error, loading: false }\r\n        case PostsActions.GET_POST_BY_ID_REQUEST:\r\n            return { ...state, loading: true }\r\n        case PostsActions.GET_POST_BY_ID_SUCCESS:\r\n            return { ...state, loading: false, postById: { ...action.payload.post } }\r\n        case PostsActions.GET_POST_BY_ID_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case PostsActions.CREATE_POST_REQUEST:\r\n            return { ...state, loading: true }\r\n        case PostsActions.CREATE_POST_SUCCESS:\r\n            return { ...state, posts: [{ ...action.payload.post }, ...state.posts] }\r\n        case PostsActions.CREATE_POST_FAILURE:\r\n            return { ...state, loading: false }\r\n        case PostsActions.UPDATE_POST_REQUEST:\r\n            return { ...state, loading: false }\r\n        case PostsActions.UPDATE_POST_SUCCESS: {\r\n            const { post } = action.payload\r\n            const posts = state.posts.map(o => o.id === post.id ? { ...post } : o)\r\n            return { ...state, posts: [...posts], loading: false }\r\n        }\r\n        case PostsActions.UPDATE_POST_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case PostsActions.REMOVE_POST_REQUEST:\r\n            return { ...state, loading: true }\r\n        case PostsActions.REMOVE_POST_SUCCESS:\r\n            return { ...state, posts: [...state.posts.filter(item => item.id != action.payload.id)] }\r\n        case PostsActions.REMOVE_POST_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case PostsActions.POST_LIKE_REQUEST:\r\n            return { ...state, loading: true }\r\n        case PostsActions.POST_LIKE_SUCCESS: {\r\n            const { post } = action.payload\r\n            const posts = state.posts.map(o => o.id === post.id ? { ...post } : o)\r\n            return { ...state, posts: [...posts], loading: false }\r\n        }\r\n        case PostsActions.POST_LIKE_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        default:\r\n            return state\r\n    }\r\n}","import { Reducer } from \"react\"\r\nimport { IUser, IUserActions, UserActionsTypes } from \"../../actions/Users/interfaces\"\r\n\r\nexport interface IUsersInitialState {\r\n    allUsers: IUser[] | null,\r\n    userById: IUser,\r\n    loading: boolean,\r\n    user: IUser | null\r\n    error: null | Error | string\r\n}\r\nconst initialState: IUsersInitialState = {\r\n    user: null,\r\n    allUsers: null,\r\n    userById: {\r\n        id: 0,\r\n        first_name: '',\r\n        last_name: '',\r\n        age: 0,\r\n        salary: 0,\r\n        avatar_image:''\r\n    },\r\n    loading: false,\r\n    error: null,\r\n}\r\nexport const usersReducer: Reducer<IUsersInitialState, any> = (state = initialState, action: IUserActions) => {\r\n    switch (action.type) {\r\n        case UserActionsTypes.AUTHENTICATE_REQUEST:\r\n            return { ...state, loading: false }\r\n        case UserActionsTypes.AUTHENTICATE_SUCCESS:\r\n            const { user } = action.payload\r\n            return { ...state, user: { ...user }, loading: false }\r\n        case UserActionsTypes.AUTHENTICATE_FAILURE:\r\n            const { error } = action.payload\r\n            return { ...state, error: error, loading: false }\r\n        case UserActionsTypes.UPDATE_USER_REQUEST:\r\n            return { ...state, loading: true }\r\n        case UserActionsTypes.UPDATE_USER_SUCCESS:\r\n            return { ...state, ...action.payload, loading: false }\r\n        case UserActionsTypes.UPDATE_USER_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case UserActionsTypes.CREATE_USER_REQUEST:\r\n            return { ...state, loading: true }\r\n        case UserActionsTypes.CREATE_USER_SUCCESS:\r\n            return { ...state, loading: false }\r\n        case UserActionsTypes.CREATE_USER_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case UserActionsTypes.GET_USER_BY_ID_REQUEST:\r\n            return { ...state, loading: true }\r\n        case UserActionsTypes.GET_USER_BY_ID_SUCCESS:\r\n            return { ...state, loading: false, userById: action.payload }\r\n        case UserActionsTypes.GET_USER_BY_ID_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case UserActionsTypes.GET_ALL_USERS_REQUEST:\r\n            return { ...state, loading: true }\r\n        case UserActionsTypes.GET_ALL_USERS_SUCCESS:\r\n            const { users } = action.payload\r\n            return { ...state, loading: false, allUsers: [...users] }\r\n        case UserActionsTypes.GET_ALL_USERS_FAILURE:\r\n            return { ...state, loading: false, error: action.payload.error }\r\n        case UserActionsTypes.USER_TO_STORAGE:\r\n            return { ...state, loading: false, user: { ...action.payload } }\r\n        case UserActionsTypes.LOG_OUT:\r\n            return { ...state, loading: false, user: null }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { Reducer } from \"react\"\r\nimport { IwsActionS, WebSocketStates } from \"../../actions/Websocket/interfaces\"\r\n\r\nexport interface IWSinitialState {\r\n    wsState: string\r\n}\r\nexport const initialWsState: IWSinitialState = {\r\n    wsState: ''\r\n}\r\nexport const wsReducer: Reducer<IWSinitialState, IwsActionS> = (state = initialWsState, action: IwsActionS) => {\r\n    switch (action.type) {\r\n        case WebSocketStates.CONNECTED:\r\n            return { ...state, wsState: WebSocketStates.CONNECTED }\r\n        case WebSocketStates.CONNECTING:\r\n            return { ...state, wsState: WebSocketStates.CONNECTING }\r\n        case WebSocketStates.CONNECTION_ERROR:\r\n            return { ...state, wsState: WebSocketStates.CONNECTION_ERROR }\r\n        default:\r\n            return state\r\n    }\r\n}","import { useHistory } from \"react-router-dom\"\r\nimport { createStore, applyMiddleware, compose } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { rootReducer } from \"../reducers\"\r\nimport { createHashHistory } from 'history'\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst history = createHashHistory()\r\nexport const store = createStore(\r\n    rootReducer(history),\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<React.StrictMode>\r\n\t\t\t<App />\r\n\t\t</React.StrictMode>\r\n\t</Provider>,\r\n\tdocument.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}